use mavenmovies;

-- 1. **Rank the customers based on the total amount they've spent on rentals.**

select customer_id , sum(amount) as amount_ , rank() over (order by sum(amount) desc) as rank_ from payment group by customer_id;

-- 2. **Calculate the cumulative revenue generated by each film over time.**
select  film.film_id , sum(rental_rate) over(partition by film_id order by inventory_id) as increase_overtime from film inner  join inventory on inventory.film_id = film.film_id ;

-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**
with total_data as (
select film_id ,rental_duration,avg(rental_duration) over () as avg_  from film),
same_length as (
select td.film_id , td.rental_duration , td.avg_ from total_data td inner join film on td.rental_duration = film.rental_duration
)
select * from same_length;

-- 4. **Identify the top 3 films in each category based on their rental counts.**

with film_counts as (
select film_id , count(inventory.inventory_id) as count_ from inventory inner join rental on inventory.inventory_id = rental.inventory_id group by film_id),
category_count as (
select fc.film_id , fc.count_ , film_category.category_id from film_counts fc inner join film_category on fc.film_id = film_category.film_id 
),
row_ as (
select category_count.* , row_number() over (partition by category_id order by count_ desc) as sr from category_count
),
final as (select film.title , count_ as rental_Count , category_id from row_ inner join film on film.film_id = row_.film_id where sr < 4)
select * from final;

-- 5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals
-- across all customers.**
with data_ as (
select customer.customer_id , count(rental_id) as count_ , avg(count(rental_id)) over() as avg_ from rental inner join customer on customer.customer_id = rental.customer_id group by customer_id
),
final as (
select customer_id , count_ - avg_ as diff , avg_ from data_
)
select * from final;

-- 6. **Find the monthly revenue trend for the entire rental store over time.**
select distinct monthname(rental_date) as month_ , sum(amount) over (partition by monthname(rental_date)) as revenue from rental inner join payment on rental.rental_id = payment.rental_id;


-- 7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**
with data_1 as (
select payment.customer_id , sum(amount) as amount_  from payment group by customer_id),
data_2 as (
select data_1.* , ntile(5) over (order by amount_ desc ) as rank_ from data_1),
data_3 as (
select customer.customer_id , concat(first_name , ' ',last_name) as name_ ,amount_ from customer inner join data_2 on customer.customer_id = data_2.customer_id where rank_ = 1
)
select * from data_3;

-- 8. **Calculate the running total of rentals per category, ordered by rental count.**
with data_1 as (
select film_id , count(rental_id) as count_ from rental inner join inventory on inventory.inventory_id = rental.inventory_id group by film_id),
data_2 as (
select category_id , sum(count_) over (partition by category_id order by count_ ,film_category.film_id) as running from data_1 inner join film_category on data_1.film_id = film_category.film_id
)
select * from data_2;

-- 9. **Find the films that have been rented less than the average rental count for their respective categories.**
with data_1 as (
select film_id , count(rental_id) as count_ from rental inner join inventory on inventory.inventory_id = rental.inventory_id group by film_id),
data_2 as (
select data_1.film_id, category_id , avg(count_) over (partition by category_id) as avg_ from data_1 inner join film_category on data_1.film_id = film_category.film_id
),
data_3 as (
select data_1.film_id , film.title ,data_1.count_ as sr_rentend ,data_2.category_id , data_2.avg_ from data_1 inner join data_2 on data_1.film_id = data_2.film_id inner join film 
on data_2.film_id = film.film_id where data_1.count_ < data_2.avg_
)
select * from data_3;

-- 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**
with data_1 as (
select distinct  monthname(rental_date) as month_ , sum(amount) over (partition by monthname(rental_date)) as revenue from rental inner join payment on rental.rental_id = payment.rental_id ),
data_2 as (
select data_1.* , row_number() over (order by revenue desc) as rank_ from data_1
),
data_3 as (
select month_,revenue from data_2 where rank_ < 6
)
select * from data_3;




